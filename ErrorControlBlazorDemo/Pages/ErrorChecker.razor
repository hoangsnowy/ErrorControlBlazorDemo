@page "/kiem-tra-loi"
@using ErrorControlBlazorDemo.Services;

@inject ParityService Parity
@inject CrcService Crc
@inject ArqService Arq

<h3 class="text-center mt-4 mb-4 text-primary">üß™ Ki·ªÉm tra l·ªói truy·ªÅn d·ªØ li·ªáu</h3>

<div class="card shadow p-4 mx-auto" style="max-width: 800px;">
  <div class="mb-3">
    <label class="form-label fw-semibold">Ch·ªçn thu·∫≠t to√°n:</label>
    <select class="form-select" @bind="SelectedAlgorithm">
      <option value="parity">üü¶ Parity</option>
      <option value="crc">üü® CRC</option>
      <option value="arq">üü• ARQ</option>
    </select>
  </div>

  @if (SelectedAlgorithm == "parity")
  {
    <div class="mb-3">
      <label class="form-label fw-semibold">Ch·ªçn lo·∫°i ki·ªÉm tra:</label>
      <select class="form-select" @bind="ParityMode">
        <option value="even">üîµ M·ªôt chi·ªÅu - Ch·∫µn</option>
        <option value="odd">üî¥ M·ªôt chi·ªÅu - L·∫ª</option>
        <option value="matrix">üî≤ Hai chi·ªÅu (ma tr·∫≠n)</option>
      </select>
    </div>
    @if (ParityMode == "matrix")
    {
      <label class="form-label fw-semibold">Nh·∫≠p ma tr·∫≠n nh·ªã ph√¢n (m·ªói d√≤ng c√°ch nhau b·∫±ng Enter):</label>
      <textarea class="form-control" rows="5" @bind="MatrixInput" placeholder="VD:
1010
1100
1111
0001"></textarea>
    }
    else
    {
      <label class="form-label fw-semibold">Chu·ªói nh·ªã ph√¢n:</label>
      <input class="form-control" @bind="ChuoiInput" />
    }
  }

  @if (SelectedAlgorithm == "crc")
  {
    <div class="mb-3">
      <label class="form-label fw-semibold">Chu·ªói d·ªØ li·ªáu M:</label>
      <input class="form-control" @bind="ChuoiInput" />
    </div>
    <div class="mb-3">
      <label class="form-label fw-semibold">Nh·∫≠p G(x):</label>
      <input class="form-control" @bind="Gx" placeholder="V√≠ d·ª•: 1101" />
    </div>
  }

  @if (SelectedAlgorithm == "arq")
  {
    <div class="mb-3">
      <label class="form-label fw-semibold">Ch·ªçn lo·∫°i ARQ:</label>
      <select class="form-select" @bind="ArqMode">
        <option value="saw">üîÅ Stop-and-Wait</option>
        <option value="gbn">‚è™ Go-Back-N</option>
        <option value="sr">üéØ Selective Repeat</option>
      </select>
    </div>
    <label class="form-label fw-semibold">Chu·ªói d·ªØ li·ªáu:</label>
    <input class="form-control" @bind="ChuoiInput" />

    <label class="form-label fw-semibold mt-3">T·ª∑ l·ªá m·∫•t ACK (0.0 ƒë·∫øn 1.0):</label>
    <input type="number" class="form-control" step="0.1" min="0" max="1" @bind="TyLeMatACK" />

    @if (ArqMode != "saw")
    {
      <label class="form-label fw-semibold mt-3">Window size:</label>
      <input type="number" class="form-control" min="1" max="10" @bind="WindowSize" />
    }
  }

  <button class="btn btn-success mt-3 w-100 fw-bold" @onclick="XuLy">‚ñ∂ Ki·ªÉm tra</button>

  @if (!string.IsNullOrEmpty(ThongBaoLoi))
  {
    <div class="alert alert-danger mt-3">@ThongBaoLoi</div>
  }
</div>

@if (KetQua.Any())
{
  <div class="mt-4 mx-auto" style="max-width: 800px;">
    <table class="table table-bordered table-striped">
      <thead class="table-info">
        <tr><th>B∆∞·ªõc</th><th>Chi ti·∫øt</th></tr>
      </thead>
      <tbody>
        @foreach (var (dong, i) in KetQua.Select((v, i) => (v, i + 1)))
        {
          <tr><td>@i</td><td>@dong</td></tr>
        }
      </tbody>
    </table>
  </div>
}

@code {
  private string SelectedAlgorithm = "parity";
  private string ParityMode = "even";
  private string ArqMode = "saw";
  private string ChuoiInput = "";
  private string Gx = "";
  private string MatrixInput = "";
  private string ThongBaoLoi = "";
  private List<string> KetQua = new();

  private double TyLeMatACK = 0.3;
  private int WindowSize = 4;

  private void XuLy()
  {
    KetQua.Clear();
    ThongBaoLoi = "";

    if (SelectedAlgorithm == "parity")
    {
      if (ParityMode == "matrix")
      {
        var matrix = MatrixInput.Split('\n', StringSplitOptions.RemoveEmptyEntries).Select(s => s.Trim()).ToArray();
        if (!matrix.All(row => row.All(c => c == '0' || c == '1')))
        {
          ThongBaoLoi = "‚ùå Ma tr·∫≠n ch·ªâ ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± 0 ho·∫∑c 1.";
          return;
        }
        if (matrix.Select(r => r.Length).Distinct().Count() != 1)
        {
          ThongBaoLoi = "‚ùå T·∫•t c·∫£ c√°c d√≤ng c·ªßa ma tr·∫≠n ph·∫£i c√≥ c√πng ƒë·ªô d√†i.";
          return;
        }
        KetQua = Parity.KiemTraHaiChieu(matrix);
      }
      else
      {
        if (string.IsNullOrWhiteSpace(ChuoiInput) || !ChuoiInput.All(c => c == '0' || c == '1'))
        {
          ThongBaoLoi = "‚ùå Chu·ªói nh·ªã ph√¢n kh√¥ng h·ª£p l·ªá (ch·ªâ ch·ª©a 0 v√† 1).";
          return;
        }
        bool odd = ParityMode == "odd";
        var (hopLe, log) = Parity.KiemTraMotChieu(ChuoiInput, odd);
        KetQua.AddRange(log);
      }
    }
    else if (SelectedAlgorithm == "crc")
    {
      if (string.IsNullOrWhiteSpace(ChuoiInput) || !ChuoiInput.All(c => c == '0' || c == '1'))
      {
        ThongBaoLoi = "‚ùå Chu·ªói M kh√¥ng h·ª£p l·ªá (ch·ªâ ch·ª©a 0 v√† 1).";
        return;
      }
      if (string.IsNullOrWhiteSpace(Gx) || Gx.Length < 2 || !Gx.All(c => c == '0' || c == '1'))
      {
        ThongBaoLoi = "‚ùå G(x) kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p √≠t nh·∫•t 2 bit nh·ªã ph√¢n.";
        return;
      }
      var (_, log) = Crc.TinhCRC(ChuoiInput, Gx);
      KetQua.AddRange(log);
    }
    else if (SelectedAlgorithm == "arq")
    {
      if (string.IsNullOrWhiteSpace(ChuoiInput) || !ChuoiInput.All(c => c == '0' || c == '1'))
      {
        ThongBaoLoi = "‚ùå Chu·ªói d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (ch·ªâ ch·ª©a 0 v√† 1).";
        return;
      }

      var frames = ChuoiInput.Chunk(4).Select(c => new string(c)).ToArray();
      KetQua = ArqMode switch
      {
        "saw" => Arq.MoPhongStopAndWait(frames, TyLeMatACK),
        "gbn" => Arq.MoPhongGoBackN(frames, WindowSize, TyLeMatACK),
        "sr" => Arq.MoPhongSelectiveRepeat(frames, WindowSize, TyLeMatACK),
        _ => new List<string> { "‚ùå Kh√¥ng h·ªó tr·ª£ thu·∫≠t to√°n ARQ n√†y." }
      };
    }
  }
}
